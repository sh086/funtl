(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{440:function(v,_,t){"use strict";t.r(_);var r=t(25),s=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"互联网全栈工程师"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#互联网全栈工程师"}},[v._v("#")]),v._v(" 互联网全栈工程师")]),v._v(" "),t("p",[v._v("​\t　互联网全栈工程师指可以独立完成产品的需求分析、开发、运营的软件工程师，需要掌握云计算、微服务、前后端分离、大数据、人工智能和区块链等必不可少的技术。")]),v._v(" "),t("h2",{attrs:{id:"课程安排"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程安排"}},[v._v("#")]),v._v(" 课程安排")]),v._v(" "),t("h3",{attrs:{id:"走进单体地狱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#走进单体地狱"}},[v._v("#")]),v._v(" 走进单体地狱")]),v._v(" "),t("p",[v._v("​\t　本阶段课程对应千锋 Java 的第三阶段的学习内容，经过本轮学习，我们会掌握 Intellij IDEA、Maven、Bootstrap、Spring、Spring MVC、MyBatis、HttpClient 等工具与框架的使用，并开始引入架构的概念，为“微服务架构”阶段打下坚实的基础。")]),v._v(" "),t("h3",{attrs:{id:"微服务架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构"}},[v._v("#")]),v._v(" 微服务架构")]),v._v(" "),t("p",[v._v("​\t　互联网开发真正需要的技术，也是我们高薪就业的保证，经过本轮学习，我们会掌握从底层 Linux 的安装到最终 DevOps 的所需技能。包括但不限于 Spring Boot、Spring Cloud、Spring Cloud Alibaba、Dubbo、Zookeeper、Redis、ELK、RabbitMQ、Ubuntu、Docker、Kubernetes、Jenkins 等全栈技能。")]),v._v(" "),t("h3",{attrs:{id:"走进价值互联网"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#走进价值互联网"}},[v._v("#")]),v._v(" 走进价值互联网")]),v._v(" "),t("p",[v._v("​\t　当下我们尚处在 “信息互联网” 时代，区块链技术的不断发展壮大为我们带来了 “价值互联网” 时代的新理念。为了不被时代淘汰，为了能够顺利进入 “价值互联网”、“工业革命 4.0” 时代，区块链的学习势在必行。课程整理中，敬请期待···")]),v._v(" "),t("h2",{attrs:{id:"如何学习编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何学习编程"}},[v._v("#")]),v._v(" 如何学习编程")]),v._v(" "),t("h3",{attrs:{id:"编程到底学什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程到底学什么"}},[v._v("#")]),v._v(" 编程到底学什么")]),v._v(" "),t("p",[t("strong",[v._v("1、站在更高的角度思考问题")])]),v._v(" "),t("p",[v._v("​\t　尽量站在老板的角度（"),t("strong",[v._v("全局角度")]),v._v("）思考问题，不要站在员工的角度思考问题，需要从"),t("code",[v._v("决策层")]),v._v(" -> "),t("code",[v._v("管理层")]),v._v(" -> "),t("code",[v._v("执行层")]),v._v(" 分析问题。")]),v._v(" "),t("blockquote",[t("p",[v._v("不要总是埋头种地，也要抬头看天；人只能接受教训，不能接受经验")])]),v._v(" "),t("p",[t("strong",[v._v("2、企业的本质")])]),v._v(" "),t("p",[v._v("​\t　企业的本质是先"),t("strong",[v._v("满足用户的需求")]),v._v("，最后才能产生盈利。用户需求并不是用户的主诉需求，通过市场调研很难获取正确的需求，需要自己体会市场"),t("strong",[v._v("深挖需求")]),v._v("，然后根据市场反馈意见优化产品。")]),v._v(" "),t("p",[t("strong",[v._v("3、一个思想两个能力")])]),v._v(" "),t("p",[v._v("① 批判性思维（编程思想）")]),v._v(" "),t("p",[v._v("​\t　批判性思维是一种思维习惯，是“对思考的思考”。21天可以养成一个行为习惯，三个月可以养成一个身体习惯，但是思维习惯是需要长期坚持才能养成的。")]),v._v(" "),t("p",[v._v("② 自主学习能力 + 独立解决问题的能力")]),v._v(" "),t("p",[v._v("​\t　不能总是使用相同的行为期望得到不同的结果，需要根据市场需要，选择性升级自己的技术栈，投入新技术的学习中。")]),v._v(" "),t("p",[t("strong",[v._v("4、XP极限编程")])]),v._v(" "),t("p",[v._v("​\t　由于自身知识面受限，会遇到很多的不清楚的知识点时，无需过多阻塞，只需一直学习下去，后面的知识很可能就能解释当前的问题。")]),v._v(" "),t("h3",{attrs:{id:"技术选型要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#技术选型要求"}},[v._v("#")]),v._v(" 技术选型要求")]),v._v(" "),t("p",[v._v("1、搜索量，指数 （百度指数）"),t("br"),v._v("\n2、社区活跃度，需要文档完备性"),t("br"),v._v("\n3、是否开源"),t("br"),v._v("\n4、可以"),t("strong",[v._v("参考国外网站TOP10")]),v._v(" 或者 "),t("strong",[v._v("论文")]),v._v(" 获取项目"),t("br")]),v._v(" "),t("h3",{attrs:{id:"软件开发思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件开发思想"}},[v._v("#")]),v._v(" 软件开发思想")]),v._v(" "),t("p",[t("strong",[v._v("1、面向对象编程")])]),v._v(" "),t("p",[v._v("​\t　面向对象编程有"),t("strong",[v._v("封装")]),v._v("、"),t("strong",[v._v("继承")]),v._v("、"),t("strong",[v._v("多态")]),v._v("三种思想。")]),v._v(" "),t("ul",[t("li",[v._v("封装：将对象的"),t("code",[v._v("属性")]),v._v("和"),t("code",[v._v("行为")]),v._v("抽象出来包装到类中")]),v._v(" "),t("li",[v._v("继承：将具有"),t("strong",[v._v("相同属性和行为")]),v._v("的对象"),t("strong",[v._v("抽象")]),v._v("出来并包装到一个父类中")]),v._v(" "),t("li",[v._v("多态：相同的属性和行为具有"),t("strong",[v._v("不同的表现方式")])])]),v._v(" "),t("p",[t("strong",[v._v("2、面向接口开发")])]),v._v(" "),t("p",[v._v("​\t　接口是为了处理各个对象之间的协作关系，是系统设计的关键组成部分，主要作用是为了将"),t("strong",[v._v("定义")]),v._v("和"),t("strong",[v._v("实现")]),v._v("分离，从而实现"),t("strong",[v._v("解耦")]),v._v("的目的。在系统设计之初，我们需要为抽象类建立行为模型。")]),v._v(" "),t("p",[t("strong",[v._v("说明："),t("code",[v._v("get")]),v._v("与"),t("code",[v._v("post")]),v._v("的区别：")])]),v._v(" "),t("p",[v._v("① 语义区别 ， "),t("code",[v._v("GET")]),v._v("只用于获取数据  "),t("code",[v._v("POST")]),v._v("只用于提交数据")]),v._v(" "),t("p",[v._v("② "),t("code",[v._v("POST")]),v._v("方法请求服务器会请求两次，第一次询问服务器能否传输数据，第二次才会传输数据，而"),t("code",[v._v("GET")]),v._v("方法只请求一次。")]),v._v(" "),t("p",[v._v("③ "),t("code",[v._v("HTTP GET")]),v._v(" 方法用于获取资源，具有"),t("strong",[v._v("幂等性")]),v._v("，不管调用多少次接口，结果不会改变。")]),v._v(" "),t("p",[t("strong",[v._v("3、面向对象设计原则")])]),v._v(" "),t("ul",[t("li",[v._v("开：面向扩展开发、面向修改关闭")]),v._v(" "),t("li",[v._v("口：接口隔离原则")]),v._v(" "),t("li",[v._v("合：组合/聚合原则")]),v._v(" "),t("li",[v._v("里：里氏替换原则")]),v._v(" "),t("li",[v._v("最：最少知识原则（迪米特法则）")]),v._v(" "),t("li",[v._v("单：单一职责原则")]),v._v(" "),t("li",[v._v("依：依赖倒置原则")])]),v._v(" "),t("blockquote",[t("p",[v._v("补充：重构原则：事不过三，三则重构")])]),v._v(" "),t("p",[t("strong",[v._v("4、产品创新思维")])]),v._v(" "),t("ul",[t("li",[v._v("看山是山：学会借用，看的是山的现象")]),v._v(" "),t("li",[v._v("看山不是山：学会遗忘，看的是山背后道理的本质")]),v._v(" "),t("li",[v._v("看山还是山：学会学习，看的是现象和本质的统一，是融会贯通")])])])}),[],!1,null,null,null);_.default=s.exports}}]);